type: edu
files:
- name: bacteria.py
  visible: true
  text: |2-

    # original = input()
    # part1 = original.split()[0]
    # part2 = original.split()[1]

    # index = part1.index("CTGCAG")
    # part1 = part1[:index+1] + " " + part1[index+1:]


    # index = part2.index("CTGCAG"[::-1]) + int(len("CTGCAG"))-1
    # part2 = part2[:index] + " " + part2[index:]

    # original = part1 + " " + part2
    # print(part1)
    # print(part2)

    # def make_complimentary(original):
    #     compliment = original
    #     compliment = compliment.replace("T","a")
    #     compliment = compliment.replace("A","t")
    #     compliment = compliment.replace("G","c")
    #     compliment = compliment.replace("C","g")
    #     compliment = compliment.upper()
    #     return compliment

    # original = input()
    # compliment = make_complimentary(original)
    # print(original)
    # print(compliment)

    def make_comp(original):
        comp = original
        comp = comp.replace("A", "t")
        comp = comp.replace("T", "a")
        comp = comp.replace("G", "c")
        comp = comp.replace("C", "g")
        comp = comp.upper()
        return comp

    original = input()
    restrictions = input()
    res1 = restrictions.split()[0]
    res2 = restrictions.split()[1]

    orig_comp = make_comp(original)
    res1_comp = make_comp(res1)
    res2_comp = make_comp(res2)


    index_orig = original.index(res1)+1
    original = original[:index_orig] + " " + original[index_orig:]

    index_comp = orig_comp.index(res1_comp)+len(res1)-1
    orig_comp = orig_comp[:index_comp] + " " + orig_comp[index_comp:]


    original = original.split()[1]
    orig_comp = orig_comp.split()[1]
    index1 = original.index(res2)
    original = original[:index1+1]
    index2 = orig_comp.index(res2_comp) + len(res2_comp)-1
    orig_comp = orig_comp[:index2]
    print(original)
    print(orig_comp)
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from hstest import *

    CORRECT = """GACGTCTGTGCAAGTACTACTGTTCTGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTAAAGAGGAGAAATTAAGCATGCGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCGGTTATGGTGTTCAATGCTTTGCGAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAAGGCCTGCAGCAAACGACGAAAACTACGCTTTAGTAGCTTAATAAGCTTAATTAGCTGACCTACTAGTCGGCCGTCTCGACATGAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCAGTCACTTGAATTCGATACCCAGCTGTTATTTGTATAGTTCA
    CTGCAGACACGTTCATGATGACAAGACGTCCAGCTGAGATCTCCTAGGGGCCCATGGATCTTAATTTCTCCTCTTTAATTCGTACGCATTTCCTCTTCTTGAAAAGTGACCTCAACAGGGTTAAGAACAACTTAATCTACCACTACAATTACCCGTGTTTAAAGACAGTCACCTCTCCCACTTCCACTACGTTGTATGCCTTTTGAATGGGAATTTAAATAAACGTGATGACCTTTTGATGGACAAGGTACCGGTTGTGAACAGTGATGAAAGCCAATACCACAAGTTACGAAACGCTCTATGGGTCTAGTATACTTTGTCGTACTGAAAAAGTTCTCACGGTACGGGCTTCCAATACATGTCCTTTCTTGATATAAAAAGTTTCTACTGCCCTTGATGTTCTGTGCACGACTTCAGTTCAAACTTCCACTATGGGAACAATTATCTTAGCTCAATTTTCCATAACTAAAATTTCTTCTACCTTTGTAAGAACCTGTGTTTAACCTTATGTTGATATTGAGTGTGTTACATATGTAGTACCGTCTGTTTGTTTTCTTACCTTAGTTTCAATTGAAGTTTTAATCTGTGTTGTAACTTCTACCTTCGCAAGTTGATCGTCTGGTAATAGTTGTTTTATGAGGTTAACCGCTACCGGGACAGGAAAATGGTCTGTTGGTAATGGACAGGTGTGTTAGACGGGAAAGCTTTCTAGGGTTGCTTTTCTCTCTGGTGTACCAGGAAGAACTCAAACATTGTCGACGACCCTAATGTGTACCGTACCTACTTGATATGTTTTCCGGACGTCGTTTGCTGCTTTTGATGCGAAATCATCGAATTATTCGAATTAATCGACTGGATGATCAGCCGGCAGAGCTGTACTTGCGTCCTTTCTTGTACACTCGTTTTCCGGTCGTTTTCCGGTCCTTGGCATTTTTCCGGCGCAACGACCGCAAAAAGGTATCCGAGGCGGGGGGACTGCTCGTAGTGTTTTTAGCTGCGAGTTCAGTCTCCACCGCTTTGGGCTGTCCTGATATTTCTATGGTCCGCAAAGGGGGACCTTCGAGGGAGCACGCGAGAGGACAAGGCTGGGACGGCGAATGGCCTATGGACAGGCGGAAAGAGGGAAGCCCTTCGCACCGCGAAAGAGTTACGAGTGCGACATCCATAGAGTCAAGCCACATCCAGCAAGCGAGGTTCGACCCGACACACGTCAGTGAACTTAAGCTATGGGTCGACAATAAACATATCAAGT"""


    class LigationTest(StageTest):
        test_files = {"input1.txt": "ATCGTTCGTGTGCATGT TGCATCTGTATCTAGCGC TAGCAAGCACACGTACAACGT AGACATAGATCGCG\nTGCAXXXXXXXXXXXXX XXXXXXXXXXXXXACGT",
                      "input2.txt": "GACGTCTGTGCAAGTACTACTGTTC TGCAGTCACTTGAATTCGATACCCAGCTGTTATTTGTATAGTTCA CTGCAGACACGTTCATGATGACAAGACGT CAGTGAACTTAAGCTATGGGTCGACAATAAACATATCAAGT\nTGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTAAAGAGGAGAAATTAAGCATGCGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCGGTTATGGTGTTCAATGCTTTGCGAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAAGGCCTGCAGCAAACGACGAAAACTACGCTTTAGTAGCTTAATAAGCTTAATTAGCTGACCTACTAGTCGGCCGTCTCGACATGAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTG CCAGCTGAGATCTCCTAGGGGCCCATGGATCTTAATTTCTCCTCTTTAATTCGTACGCATTTCCTCTTCTTGAAAAGTGACCTCAACAGGGTTAAGAACAACTTAATCTACCACTACAATTACCCGTGTTTAAAGACAGTCACCTCTCCCACTTCCACTACGTTGTATGCCTTTTGAATGGGAATTTAAATAAACGTGATGACCTTTTGATGGACAAGGTACCGGTTGTGAACAGTGATGAAAGCCAATACCACAAGTTACGAAACGCTCTATGGGTCTAGTATACTTTGTCGTACTGAAAAAGTTCTCACGGTACGGGCTTCCAATACATGTCCTTTCTTGATATAAAAAGTTTCTACTGCCCTTGATGTTCTGTGCACGACTTCAGTTCAAACTTCCACTATGGGAACAATTATCTTAGCTCAATTTTCCATAACTAAAATTTCTTCTACCTTTGTAAGAACCTGTGTTTAACCTTATGTTGATATTGAGTGTGTTACATATGTAGTACCGTCTGTTTGTTTTCTTACCTTAGTTTCAATTGAAGTTTTAATCTGTGTTGTAACTTCTACCTTCGCAAGTTGATCGTCTGGTAATAGTTGTTTTATGAGGTTAACCGCTACCGGGACAGGAAAATGGTCTGTTGGTAATGGACAGGTGTGTTAGACGGGAAAGCTTTCTAGGGTTGCTTTTCTCTCTGGTGTACCAGGAAGAACTCAAACATTGTCGACGACCCTAATGTGTACCGTACCTACTTGATATGTTTTCCGGACGTCGTTTGCTGCTTTTGATGCGAAATCATCGAATTATTCGAATTAATCGACTGGATGATCAGCCGGCAGAGCTGTACTTGCGTCCTTTCTTGTACACTCGTTTTCCGGTCGTTTTCCGGTCCTTGGCATTTTTCCGGCGCAACGACCGCAAAAAGGTATCCGAGGCGGGGGGACTGCTCGTAGTGTTTTTAGCTGCGAGTTCAGTCTCCACCGCTTTGGGCTGTCCTGATATTTCTATGGTCCGCAAAGGGGGACCTTCGAGGGAGCACGCGAGAGGACAAGGCTGGGACGGCGAATGGCCTATGGACAGGCGGAAAGAGGGAAGCCCTTCGCACCGCGAAAGAGTTACGAGTGCGACATCCATAGAGTCAAGCCACATCCAGCAAGCGAGGTTCGACCCGACACACGT"}

        def common_test(self, input_file, correct_original, correct_complement):
            program = TestedProgram()
            program.start()

            if not program.is_waiting_input():
                raise WrongAnswer("You program should input the string")

            reply = program.execute(input_file)

            reply_list = reply.strip().split()
            if len(reply_list) != 2:
                raise WrongAnswer(f"There should be both strands: original and complementary separated by a newline character.\n"
                                  f"Therefore, the output should consist of 2 lines, found {len(reply_list)}")
            else:
                original_strand = reply_list[0]
                complement_strand = reply_list[1]
                if " " in original_strand or " " in complement_strand:
                    raise WrongAnswer("There should be no gaps in the strands")
                elif len(original_strand) != len(correct_original):
                    raise WrongAnswer("Check the length of the original strand.")
                elif len(complement_strand) != len(correct_complement):
                    raise WrongAnswer("Check the length of the complementary strand.")
                elif original_strand[0:5] != correct_original[0:5]:
                    raise WrongAnswer(f"The original strand should begin with {correct_original[0:5]}")
                elif original_strand[-5:] != correct_original[-5:]:
                    raise WrongAnswer(f"The original strand should end with {correct_original[-5:]}")
                elif complement_strand[0:5] != correct_complement[0:5]:
                    raise WrongAnswer(f"The complementary strand should begin with {correct_complement[0:5]}")
                elif complement_strand[-5:] != correct_complement[-5:]:
                    raise WrongAnswer(f"The complementary strand should end with {correct_complement[-5:]}")
                elif original_strand != correct_original:
                    raise WrongAnswer(f"Original plasmid is wrong.\n"
                                      f"Check if you performs the ligation correctly")
                elif complement_strand != correct_complement:
                    raise WrongAnswer(f"Complimentary plasmid is wrong.\n"
                                      f"Check if you performs the ligation correctly")
                else:
                    return CheckResult.correct()

        @dynamic_test(files=test_files)
        def test1(self):
            return self.common_test("input1.txt",
                                    "ATCGTTCGTGTGCATGTTGCAXXXXXXXXXXXXXTGCATCTGTATCTAGCGC",
                                    "TAGCAAGCACACGTACAACGTXXXXXXXXXXXXXACGTAGACATAGATCGCG")

        @dynamic_test(files=test_files)
        def test2(self):
            return self.common_test("input2.txt", CORRECT.split()[0], CORRECT.split()[1])


    if __name__ == "__main__":
        LigationTest().run_tests()
  learner_created: false
- name: example.txt
  visible: true
  learner_created: true
- name: plasmid_gfp_example.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/15918#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 27 Aug 2022 03:06:30 UTC
record: 5
