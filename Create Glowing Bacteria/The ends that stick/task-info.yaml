type: edu
files:
- name: bacteria.py
  visible: true
  text: |2-

    # original = input()
    # part1 = original.split()[0]
    # part2 = original.split()[1]

    # index = part1.index("CTGCAG")
    # part1 = part1[:index+1] + " " + part1[index+1:]


    # index = part2.index("CTGCAG"[::-1]) + int(len("CTGCAG"))-1
    # part2 = part2[:index] + " " + part2[index:]

    # original = part1 + " " + part2
    # print(part1)
    # print(part2)

    def make_complimentary(original):
        compliment = original
        compliment = compliment.replace("T","a")
        compliment = compliment.replace("A","t")
        compliment = compliment.replace("G","c")
        compliment = compliment.replace("C","g")
        compliment = compliment.upper()
        return compliment

    original = input()
    compliment = make_complimentary(original)
    print(original)
    print(compliment)
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from hstest import *

    CORRECT = """TGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTAAAGAGGAGAAATTAAGCATGCGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCGGTTATGGTGTTCAATGCTTTGCGAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAAGGCCTGCAGCAAACGACGAAAACTACGCTTTAGTAGCTTAATAAGCTTAATTAGCTGACCTACTAGTCGGCCGTCTCGACATGAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTG\nCCAGCTGAGATCTCCTAGGGGCCCATGGATCTTAATTTCTCCTCTTTAATTCGTACGCATTTCCTCTTCTTGAAAAGTGACCTCAACAGGGTTAAGAACAACTTAATCTACCACTACAATTACCCGTGTTTAAAGACAGTCACCTCTCCCACTTCCACTACGTTGTATGCCTTTTGAATGGGAATTTAAATAAACGTGATGACCTTTTGATGGACAAGGTACCGGTTGTGAACAGTGATGAAAGCCAATACCACAAGTTACGAAACGCTCTATGGGTCTAGTATACTTTGTCGTACTGAAAAAGTTCTCACGGTACGGGCTTCCAATACATGTCCTTTCTTGATATAAAAAGTTTCTACTGCCCTTGATGTTCTGTGCACGACTTCAGTTCAAACTTCCACTATGGGAACAATTATCTTAGCTCAATTTTCCATAACTAAAATTTCTTCTACCTTTGTAAGAACCTGTGTTTAACCTTATGTTGATATTGAGTGTGTTACATATGTAGTACCGTCTGTTTGTTTTCTTACCTTAGTTTCAATTGAAGTTTTAATCTGTGTTGTAACTTCTACCTTCGCAAGTTGATCGTCTGGTAATAGTTGTTTTATGAGGTTAACCGCTACCGGGACAGGAAAATGGTCTGTTGGTAATGGACAGGTGTGTTAGACGGGAAAGCTTTCTAGGGTTGCTTTTCTCTCTGGTGTACCAGGAAGAACTCAAACATTGTCGACGACCCTAATGTGTACCGTACCTACTTGATATGTTTTCCGGACGTCGTTTGCTGCTTTTGATGCGAAATCATCGAATTATTCGAATTAATCGACTGGATGATCAGCCGGCAGAGCTGTACTTGCGTCCTTTCTTGTACACTCGTTTTCCGGTCGTTTTCCGGTCCTTGGCATTTTTCCGGCGCAACGACCGCAAAAAGGTATCCGAGGCGGGGGGACTGCTCGTAGTGTTTTTAGCTGCGAGTTCAGTCTCCACCGCTTTGGGCTGTCCTGATATTTCTATGGTCCGCAAAGGGGGACCTTCGAGGGAGCACGCGAGAGGACAAGGCTGGGACGGCGAATGGCCTATGGACAGGCGGAAAGAGGGAAGCCCTTCGCACCGCGAAAGAGTTACGAGTGCGACATCCATAGAGTCAAGCCACATCCAGCAAGCGAGGTTCGACCCGACACACGT"""

    gfp = "GCATGCCTGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTAAAGAGGAGAAATTAAGCATGCGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCGGTTATGGTGTTCAATGCTTTGCGAGATACCCAGATCATATGAAACAGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAAGGCCTGCAGCAAACGACGAAAACTACGCTTTAGTAGCTTAATAAGCTTAATTAGCTGACCTACTAGTCGGCCGTCTCGACATGAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGT"
    restrictions = "CTGCAG GTGCAC"


    class RestrictionTest(StageTest):
        def common_test(self, dna, sites, correct_initial, correct_complement):
            program = TestedProgram()
            program.start()

            if not program.is_waiting_input():
                raise WrongAnswer("You program should input two strings (the sequence to cut and the restriction sites)")

            output = program.execute(dna)

            if not program.is_waiting_input():
                raise WrongAnswer("You program should input two strings (the sequence to cut and the restriction sites)")

            output += program.execute(sites)

            lines_in_reply = len(output.strip().split())
            if lines_in_reply != 2:
                raise WrongAnswer(f"Your function should return both strands (initial and complementary).\n"
                                  f"Each strand is on a separate line so there are exactly 2 lines in the output, found {lines_in_reply}")
            else:
                initial_strand = output.split()[0]
                complement_strand = output.split()[1]
                if len(initial_strand) != len(correct_initial):
                    raise WrongAnswer("Check the length of the initial strand.")
                elif len(complement_strand) != len(correct_complement):
                    raise WrongAnswer("Check the length of the complementary strand.")
                elif initial_strand[0:4] != "TGCA":
                    raise WrongAnswer("Check the protruding end at the beginning of the initial strand. It should be TGCA.")
                elif complement_strand[-4:] != "ACGT":
                    raise WrongAnswer("Check the protruding end at the end of the complementary strand. It should be TGCA.")
                else:
                    if initial_strand != correct_initial:
                        raise WrongAnswer("You have an error in the sequence content of the initial strand.")
                    elif complement_strand != correct_complement:
                        raise WrongAnswer("You have an error in the sequence content of the complementary strand.")
                    else:
                        return CheckResult.correct()

        @dynamic_test
        def test1(self):
            return self.common_test("CCTGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAATTGCACGCA", "CTGCAG TTGCAC",
                                    "TGCAGGTCGACTCTAGAGGATCCCCGGGTACCTAGAAT", "CCAGCTGAGATCTCCTAGGGGCCCATGGATCTTAACGT")

        @dynamic_test
        def test2(self):
            return self.common_test(gfp, restrictions, CORRECT.split()[0], CORRECT.split()[1])


    if __name__ == "__main__":
        RestrictionTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15917#comment
status: Solved
record: 3
